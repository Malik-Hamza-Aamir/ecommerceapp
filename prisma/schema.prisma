generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SellerStatus {
  CUSTOMER
  SELLER
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model User {
  id           String       @id @unique
  username     String
  email        String       @unique
  password     String
  phone        String?
  image        UserImage?
  address      Address[]
  sellerStatus SellerStatus @default(CUSTOMER)
  stores       Store[]
  orders       Order[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cart         Cart?
  userImageId  String?
}

model UserImage {
  id           String       @id @default(cuid())
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique
}

model Cart {
  id       Int       @id @default(autoincrement())
  products Product[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

model Order {
  orderId     String      @id @default(cuid())
  products    Product[]
  userId      String
  orderStatus OrderStatus @default(PENDING)
  totalPrice  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User        @relation(fields: [userId], references: [id])
}

enum AddressType {
  PRIMARY
  SECONDARY
}

model Address {
  id            String      @id @default(cuid())
  street        String
  city          String
  stateProvince String
  country       String
  zip           String
  addressType   AddressType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  User          User?       @relation(fields: [userId], references: [id])
  userId        String?
}

model Store {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  User        User?     @relation(fields: [userId], references: [id])
  userId      String
  products    Product[]
}

model Product {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String
  price        Float
  quantity     Int
  sizes        String[]
  colors       String[]
  Store        Store?    @relation(fields: [storeId], references: [id])
  storeId      String
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String
  Order        Order?    @relation(fields: [orderOrderId], references: [orderId])
  orderOrderId String?
  Cart         Cart?     @relation(fields: [cartId], references: [id])
  cartId       Int?
}

model Category {
  id       String    @id @default(cuid())
  title    String    @unique
  products Product[]
}
