generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SellerStatus {
  CUSTOMER
  SELLER
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model User {
  id           String       @id @unique
  username     String
  email        String       @unique
  password     String
  phone        String?
  image        UserImage?
  address      Address[]
  sellerStatus SellerStatus @default(CUSTOMER)
  stores       Store[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cart         Cart?
  userImageId  String?
  myOrders     MyOrders[]
  toDeliver    ToDeliver[]
}

model ToDeliver {
  id              String            @id @default(cuid())
  productQuantity ProductQuantity[]
  totalBill       Int
  address         String
  shippingStatus  OrderStatus       @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  User            User              @relation(fields: [userId], references: [id])
  userId          String
}

model MyOrders {
  id              String            @id @default(cuid())
  productQuantity ProductQuantity[]
  totalBill       Int
  Address         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  User            User              @relation(fields: [userId], references: [id])
  userId          String
}

model ProductQuantity {
  id          String     @id @default(cuid())
  productId   String
  quantity    Int
  MyOrders    MyOrders?  @relation(fields: [myOrdersId], references: [id])
  myOrdersId  String?
  ToDeliver   ToDeliver? @relation(fields: [toDeliverId], references: [id])
  toDeliverId String?
}

model Product {
  id          String         @id @default(cuid())
  name        String         @unique
  description String
  price       Float
  quantity    Int
  sizes       String[]
  colors      String[]
  images      ProductImage[]
  Store       Store?         @relation(fields: [storeId], references: [id])
  storeId     String
  Category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String
  Cart        Cart?          @relation(fields: [cartId], references: [id])
  cartId      Int?
}

model Store {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  image       StoreImage?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  User        User?       @relation(fields: [userId], references: [id])
  userId      String
  products    Product[]
}

model UserImage {
  id           String       @id @default(cuid())
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique
}

model Cart {
  id       Int       @id @default(autoincrement())
  products Product[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum AddressType {
  PRIMARY
  SECONDARY
}

enum ImageType {
  PRIMARY
  SECONDARY
}

model Address {
  id            String      @id @default(cuid())
  street        String
  city          String
  stateProvince String
  country       String
  zip           String
  addressType   AddressType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  User          User?       @relation(fields: [userId], references: [id])
  userId        String?
}

model StoreImage {
  id           String       @id @default(cuid())
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  store        Store?       @relation(fields: [storeId], references: [id])
  storeId      String?      @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ProductImage {
  id           String       @id @default(cuid())
  uploadStatus UploadStatus @default(PENDING)
  imageType    ImageType
  url          String
  key          String
  product      Product      @relation(fields: [productId], references: [id])
  productId    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  title    String    @unique
  products Product[]
}
