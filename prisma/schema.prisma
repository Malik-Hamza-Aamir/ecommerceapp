generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum SellerStatus {
  CUSTOMER
  SELLER
}

// model ProductImage {
//   id        String  @id @default(cuid())
//   url       String
//   product   Product @relation(fields: [productId], references: [id])
//   productId String
// }

model User {
  id              String            @id @unique
  username        String
  email           String            @unique
  password        String
  sellerStatus    SellerStatus?
  stores          Store[]
  carts           Cart[]
  paymentMethods  PaymentMethod[]
  addresses       Address[]
  purchaseHistory PurchaseHistory[]
  orders          Order[]
  phone           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Product {
  id                String           @id @default(cuid())
  name              String
  // uploadStatus  UploadStatus   @default(PENDING)
  // productImages ProductImage[]
  price             Int
  description       String
  quantity          Int
  store             Store            @relation(fields: [storeId], references: [id])
  storeId           String
  Cart              Cart?            @relation(fields: [cartId], references: [id])
  cartId            String?
  PurchaseHistory   PurchaseHistory? @relation(fields: [purchaseHistoryId], references: [id])
  purchaseHistoryId String?          
  Order             Order[]
}

model Store {
  id       String    @id @default(cuid())
  name     String
  owner    User      @relation(fields: [ownerId], references: [id])
  ownerId  String
  products Product[]
}

model Cart {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  products Product[]
}

model PaymentMethod {
  id      String @id @default(cuid())
  type    String 
  details String 
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Address {
  id     String @id @default(cuid())
  street String
  city   String
  state  String
  zip    String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model PurchaseHistory {
  id       String    @id @default(cuid())
  products Product[] 
  total    Float
  user     User      @relation(fields: [userId], references: [id])
  userId   String
}

model Order {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  total     Float
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  productId String
}
